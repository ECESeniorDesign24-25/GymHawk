#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "gymhawkDeviceB"
  https://create.arduino.cc/cloud/things/6ad4d9f7-8444-4595-bf0b-5fb62c36430c 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float d1GreenLat;
  float d1GreenLong;
  float d1GreenRate;
  bool d1GreenInUse;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Wire.h>

//Create an instance of the ADXL345 class
int ADXL345 = 0x53;

float X_out, Y_out, Z_out;

int count = 0;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  Wire.begin();
  pinMode(LED_BUILTIN,OUTPUT);
  digitalWrite(LED_BUILTIN,LOW);
  //Set ADXL in measuring mode
  Wire.beginTransmission(ADXL345);     //start communicating
  Wire.write(0x2D);                    // Power_CTL register
  //Enable measurement
  Wire.write(8);                       //Bit D3 High for measurement
  Wire.endTransmission();
  delay(10);

  //X-axis
  Wire.beginTransmission(ADXL345);
  Wire.write(0x1E);
  Wire.write(1);
  Wire.endTransmission();
  delay(10);

  //Y-axis
  Wire.beginTransmission(ADXL345);
  Wire.write(0x1F);
  Wire.write(-1);
  Wire.endTransmission();
  delay(10);

  //Z-axis
  Wire.beginTransmission(ADXL345);
  Wire.write(0x20);
  Wire.write(5);
  Wire.endTransmission();
  delay(10);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  //Read x, y, and z axis acceleration values
  //Wire.beginTransmission(ADXL345);
  //Wire.write(0x32);                     //Start with register 0x32 (ACCEL_XOUT_H)
 // Wire.endTransmission(false);
  //Wire.requestFrom(ADXL345, 6, true);   //read 6 registers total, each axis value stored in 2 registers
  
  while(count < 50){
    readAccel();
    count++;
  }
  //Serial.println("Sleeping for two minutes");
  //ESP.deepSleep(20e6, WAKE_RF_DEFAULT);
}

void readAccel()
{
    Wire.beginTransmission(ADXL345);
    Wire.write(0x32);                     //Start with register 0x32 (ACCEL_XOUT_H)
    Wire.endTransmission(false);
    Wire.requestFrom(ADXL345, 6, true);
  
    X_out = readInt16() / 256.f; //obtain x,y,z-axis values and scale (float)
    Y_out = readInt16() / 256.f;
    Z_out = readInt16() / 256.f;

    if (Z_out < 0.96 || Z_out > 1.04 || X_out > 0.1 || X_out < -0.1 || Y_out > 0.1 || Y_out < -0.1){     //basic movement detection while module is stationed flat
    MotionDetected();
      break;
    }else{
     NoMotion();
    }

    Serial.print("Xa: ");
    Serial.print(X_out);
    Serial.print(" Ya: ");
    Serial.print(Y_out);
    Serial.print(" Za: ");
    Serial.print(Z_out);
    Serial.println("");
    while (millis() < 100){
      // do nothing
    }
}

int16_t readInt16()              //32-bit integers to 16-bit to account for negative values
{
  int lsb = Wire.read();
  int msb = Wire.read();
  return int16_t(lsb | msb << 8);
}

void MotionDetected()
{
  d1GreenInUse = 1;
  digitalWrite(LED_BUILTIN,LOW);
  //Serial.println("Motion detected");
  
}
void NoMotion()
{
  d1GreenInUse = 0;
  digitalWrite(LED_BUILTIN,HIGH);
  //Serial.println("No motion detected");
  
}

/*
  Since MachineBInUse is READ_WRITE variable, onMachineBInUseChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMachineBInUseChange()  {
  // Add your code here to act upon MachineBInUse change
}

/*
  Since MachineBRate is READ_WRITE variable, onMachineBRateChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMachineBRateChange()  {
  // Add your code here to act upon MachineBRate change
}


/*
  Since MachineInUse is READ_WRITE variable, onMachineInUseChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMachineInUseChange()  {
  // Add your code here to act upon MachineInUse change
}


/*
  Since D1GreenGPS is READ_WRITE variable, onD1GreenGPSChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD1GreenGPSChange()  {
  // Add your code here to act upon D1GreenGPS change
}

/*
  Since D1GreenInUse is READ_WRITE variable, onD1GreenInUseChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD1GreenInUseChange()  {
  // Add your code here to act upon D1GreenInUse change
}

/*
  Since D1GreenRate is READ_WRITE variable, onD1GreenRateChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD1GreenRateChange()  {
  // Add your code here to act upon D1GreenRate change
}

/*
  Since D1GreenLat is READ_WRITE variable, onD1GreenLatChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD1GreenLatChange()  {
  // Add your code here to act upon D1GreenLat change
}

/*
  Since D1GreenLong is READ_WRITE variable, onD1GreenLongChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD1GreenLongChange()  {
  // Add your code here to act upon D1GreenLong change
}
