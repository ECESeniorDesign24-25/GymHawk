#include "arduino_secrets.h"

// // Code generated by Arduino IoT Cloud, DO NOT EDIT.

// #include <ArduinoIoTCloud.h>
// #include <Arduino_ConnectionHandler.h>

// const char DEVICE_LOGIN_NAME[]  = "656c7ef8-f559-43c8-8d51-9685b39e1ab7";

// const char SSID[]               = SECRET_SSID;    // Network SSID (name)
// const char PASS[]               = SECRET_OPTIONAL_PASS;    // Network password (use for WPA, or use as key for WEP)
// const char DEVICE_KEY[]  = SECRET_DEVICE_KEY;    // Secret device password

// void onMachineARateChange();
// void ond1BlueInUseChange();

// float machineARate;
// bool d1BlueInUse;

// void initProperties(){

//   ArduinoCloud.setBoardId(DEVICE_LOGIN_NAME);
//   ArduinoCloud.setSecretDeviceKey(DEVICE_KEY);
//   ArduinoCloud.addProperty(machineARate, READWRITE, ON_CHANGE, onMachineARateChange);
//   ArduinoCloud.addProperty(d1BlueInUse, READWRITE, ON_CHANGE, ond1BlueInUseChange);

// }

// WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/fe619885-ba9d-41d5-b4b2-c527b9ca6fb9 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float analogOffset;
  float d1BlueAltitude;
  float d1BlueLat;
  float d1BlueLong;
  float d1BlueRate;
  float smoothedrmsCurrent;
  float smoothingFactor;
  float threshold;
  int sampleNumber;
  bool d1BlueInUse;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/


#include "thingProperties.h"
#include <SoftwareSerial.h>
#include <TinyGPSPlus.h>
#include <TinyGPS++.h>

//wifi update constants
const long updateInterval = 10000;  
unsigned long lastUpdateTime = 0;

//GPS constants
const long innerLoopTimeout = 5000;
const long outerLoopTimeout = 5000;
static const int TXPin = 13, RXPin = 12;
static const uint32_t GPSBaud = 9600;
bool newData = false;

/* 
// GPS timing constants (for potential alternative way to poll GPS for a specified time period)
unsigned long startMillis;  //some global variables available anywhere in the program
unsigned long currentMillis;
const unsigned long period = 5000;
*/

// TinyGPSPlus object
TinyGPSPlus gps;

//current signal constants
int base = 5;
float rmsCurrent = 0.0;
float current = 0.0;
float current1 = 0.0;
float localsmoothingFactor = 0.2;
int localsampleNumber = 200;
float localanalogOffset = 496.0;
float localthreshold = 0.0;

// The serial connection to the GPS device
SoftwareSerial ss(RXPin, TXPin);

void setup() {
  
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  
  // Initialize GPS serial communication
  ss.begin(GPSBaud);

  /*
  //GPS SEQUENCE (for potential alternative way to poll GPS for a specified time period)
  // needs work
  startMillis = millis();
  currentMillis = millis();
  while (currentMillis - startMillis < period)  //test whether the period has elapsed
  {
    if (ss.available() > 0) {
      if (gps.encode(ss.read())) {
      d1BlueLat = gps.location.lat();  
      d1BlueLong = gps.location.lng();       
      }
      currentMillis =  millis();
    }
  }
*/
  
// switching out of power supply in-rush current limiter
  pinMode(base, OUTPUT);
  delay(10000);
  digitalWrite(base, HIGH);
  delay(1000);
  digitalWrite(base,LOW);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  
     /*The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4*/
 
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  smoothingFactor = localsmoothingFactor;
  sampleNumber = localsampleNumber;
  analogOffset = localanalogOffset;
  threshold = localthreshold;
}

void loop() {
  
  // do-while loop waits for lat, long, alt update and then exits
  bool newData = false;
  unsigned long outerLoopStart = millis();
  
  do
  {
    unsigned long innerLoopStart = millis();
    while (ss.available() && ((millis() - innerLoopStart) < innerLoopTimeout))
    {
      char c = ss.read();
      gps.encode(c);
      if (gps.location.isUpdated() && gps.altitude.isUpdated()) {
      newData = true;
      }
    }
  } while (newData != true && ((millis() - outerLoopStart) < outerLoopTimeout));

  //GPS variable updates
  d1BlueLat = gps.location.lat();
  d1BlueLong = gps.location.lng();
  d1BlueAltitude = gps.altitude.feet();


  //current signal calculation and update
  float currentSquared = 0.0;
  for (int i=0; i<localsampleNumber; i++) {
    current = analogRead(A0) - localanalogOffset;
    currentSquared += current * current;
  }
  rmsCurrent = sqrt(currentSquared/float(localsampleNumber));
  smoothedrmsCurrent = localsmoothingFactor * rmsCurrent + (1 - localsmoothingFactor) * smoothedrmsCurrent;
  
  if (smoothedrmsCurrent>localthreshold) {
    d1BlueInUse = 1;
  }
  else {
    d1BlueInUse = 0;
  }

  /* Alternative method for obtaining peak value of waveform *needs work*
  for (int i=0; i<200; i++) {
    current1 = analogRead(A0);
    peakCurrent = peakCurrent * (1 - localsmoothingFactor) + current1 * localsmoothingFactor;
  }
  */
  
  // cloud update frequency sequence
  ArduinoCloud.update();
  if (millis() - lastUpdateTime > updateInterval) {
    //d1BlueInUse = (random(2) == 1) ? true : false;
    Serial.print("d1BlueInUse updated to: ");
    Serial.println(d1BlueInUse);
    lastUpdateTime = millis();
  }
  
}

void onD1BlueInUseChange()  {
  // Add your code here to act upon d1BlueInUse change
}

/*
  Since d1BlueInUse is READ_WRITE variable, ond1BlueInUseChange() is
  executed every time a new value is received from IoT Cloud.
*/

void ond1BlueInUseChange()  {
  // Add your code here to act upon d1BlueInUse change
}

void onMachineARateChange() {
  // add code
}

/*
  Since D1BlueRate is READ_WRITE variable, onD1BlueRateChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD1BlueRateChange()  {
  // Add your code here to act upon D1BlueRate change
}

/*
  Since D1BlueGPS is READ_WRITE variable, onD1BlueGPSChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD1BlueGPSChange()  {
  // Add your code here to act upon D1BlueGPS change
}

/*
  Since D1BlueLat is READ_WRITE variable, onD1BlueLatChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD1BlueLatChange()  {
  // Add your code here to act upon D1BlueLat change
}

/*
  Since D1BlueLong is READ_WRITE variable, onD1BlueLongChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD1BlueLongChange()  {
  // Add your code here to act upon D1BlueLong change
}

/*
  Since D1BlueAltitude is READ_WRITE variable, onD1BlueAltitudeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD1BlueAltitudeChange()  {
  // Add your code here to act upon D1BlueAltitude change
}


/*
  Since SmoothingFactor is READ_WRITE variable, onSmoothingFactorChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSmoothingFactorChange()  {
  localsmoothingFactor = smoothingFactor;
}

/*
  Since SampleNumber is READ_WRITE variable, onSampleNumberChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSampleNumberChange()  {
  localsampleNumber = sampleNumber;
}

/*
  Since AnalogOffset is READ_WRITE variable, onAnalogOffsetChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAnalogOffsetChange()  {
  localanalogOffset = analogOffset;
}


/*
  Since Threshold is READ_WRITE variable, onThresholdChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onThresholdChange()  {
  localthreshold = threshold;
}